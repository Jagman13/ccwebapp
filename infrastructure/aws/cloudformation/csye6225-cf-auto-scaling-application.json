{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{
      "keyPair":{
         "Type":"String"
      },

      "stackName":{
         "Type":"String"
      },

      "amiId":{
         "Type":"String"
      },

      "S3CodeDeployBucket":{
        "Description": "S3 bucket name where code deploy artifacts are stored",
        "Type": "String"
      },

      "S3ImageBucket":{
        "Description": "S3 bucket name where Images are stored",
        "Type": "String"
      },

      "VPC": {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "VPC to launch the instance into.",
        "Default" : "vpc-78523602"
      },

      "Subnet1": {
        "Type": "AWS::EC2::Subnet::Id",
        "Description": "Subnet to launch the instance into.",
        "Default" :  "subnet-c6e9bc9a" 
      },

      "Subnet2": {
        "Type": "AWS::EC2::Subnet::Id",
        "Description": "Subnet to launch the instance into.",
        "Default" :  "subnet-86a3ebe1" 
      },

      "Subnet3": {
        "Type": "AWS::EC2::Subnet::Id",
        "Description": "Subnet to launch the instance into.",
        "Default" :  "subnet-6bfaad45" 
      },

      
      "certificateARN":{
         "Type":"String"
      },

      "hostedId":{
         "Type":"String"

      },

      "domainName" :{
    	 "Type":"String"

      },

      "DBUsername":{
         "Default":"csye6225master",
         "Description":"The database admin account username",
         "Type":"String",
         "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*"
      },

      "DBPassword":{
         "Default":"csye6225password",
         "Description":"The database admin account password",
         "Type":"String",
         "AllowedPattern":"[a-zA-Z0-9]*"
      },

      "CFNUser" : {
        "Type": "String",
        "Default": "circleci"
      }
   },

   "Resources":{
      "webServerSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "DependsOn":"loadbalancerSecurityGroup",
         "Properties":{
            "GroupDescription":"Security Group for Web Server",
            "VpcId" : {"Ref": "VPC"}, 
            
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":443,
                  "ToPort":443,
                  "SourceSecurityGroupId" : {"Ref":"loadbalancerSecurityGroup"}
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":8080,
                  "ToPort":8080,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":223,
                  "ToPort":223,
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
         
      },

      "DBSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security Group for DB",
            "VpcId" : {"Ref": "VPC"}, 
            "SecurityGroupIngress":[
               {
                  "SourceSecurityGroupId":{
                     "Ref":"webServerSecurityGroup"
                  },
                  "FromPort":3306,
                  "IpProtocol":"tcp",
                  "ToPort":3306
               }
            ]
         }
      },

      "loadbalancerSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security Group for Load Balancers",
            "VpcId" : {"Ref": "VPC"},
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":443,
                  "ToPort":443,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":8080,
                  "ToPort":8080,
                  "CidrIp":"0.0.0.0/0"
               }
            ] ,

             "Tags":[
               {
                  "Key":"Name",
                  "Value":"csye6225LoadBalancerGroup"
               }
            ]
         }
      },


      "DBSubnetGroup": {
         "Type": "AWS::RDS::DBSubnetGroup",
         "Properties": {
         "DBSubnetGroupDescription": "Subnets for RDS DB Instance",
         "DBSubnetGroupName":{
            "Fn::Join":[
               "",
               [
                  {
                     "Ref":"stackName"
                  },
                     "-csye6225-db-subnetgroup"
               ]
               ]
            },    
         "SubnetIds": [ { "Ref" : "Subnet1" },
                        { "Ref" : "Subnet2"} ]
         }
      }, 

      "DynamoDBTable" : {
        "Type" : "AWS::DynamoDB::Table",
        "Properties" : {
          "AttributeDefinitions" : [ {"AttributeName": "Email",
          "AttributeType": "S"} ],
          "KeySchema" : [ {"AttributeName" : "Email",
          "KeyType" : "HASH"} ],
          "ProvisionedThroughput" : {"ReadCapacityUnits": "5",
          "WriteCapacityUnits" : "5"},
          "TimeToLiveSpecification": {"AttributeName": "ttl_timestamp",
          "Enabled": "TRUE"},
          "TableName" : "csye6225",
          "Tags":[
               {
                  "Key":"Name",
                  "Value":"csye6225DynamoDB"
               }
            ]

        }
      },

      "launchConfiguration" :{
         "Type":"AWS::AutoScaling::LaunchConfiguration",
         "Properties":{
            "ImageId" :{"Ref" : "amiId"},
            "KeyName":{"Ref":"keyPair"},
            "InstanceType":"t2.micro",
            "IamInstanceProfile" : {"Ref" : "CodeDeployEC2ServiceInstanceProfile"},
            "AssociatePublicIpAddress":true,
            "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/sda1",
                  "Ebs" : {
                     "DeleteOnTermination" : true,
                     "VolumeSize" : 20,
                     "VolumeType" : "gp2"
                     } 
               }
             ],
            "SecurityGroups":[
               {
                  "Ref":"webServerSecurityGroup"
               }
            ],
            "UserData":{
                "Fn::Base64":{
                  "Fn::Join":[
                     "\n",
                     [
                        "#!/bin/bash -xe ",
                         "sudo echo SPRING_PROFILES_ACTIVE=prod | sudo tee -a /usr/lib/systemd/system/envVariables",
                "sudo echo SPRING_DATASOURCE_USERNAME=csye6225master |  sudo tee -a /usr/lib/systemd/system/envVariables",
                "sudo echo SPRING_DATASOURCE_PASSWORD=csye6225password |  sudo tee -a /usr/lib/systemd/system/envVariables",
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo echo SPRING_DATASOURCE_URL=jdbc:mysql://",
                      {
                        "Fn::GetAtt": [
                          "DBInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":3306/csye6225 | sudo tee -a /usr/lib/systemd/system/envVariables"
                    ]
                  ]
                },
                {"Fn::Join": [
                  "",
                  ["sudo echo S3_BUCKET_NAME=",{"Ref":"S3ImageBucket"}, " | sudo tee -a /usr/lib/systemd/system/envVariables"]]},

               {"Fn::Join": [
                  "",
                  ["sudo echo SNS_TOPIC_ARN=",{"Fn::ImportValue":"SNSARN"}, " | sudo tee -a /usr/lib/systemd/system/envVariables"]]},

                 "sudo systemctl daemon-reload",
                "sudo systemctl restart tomcat.service",
                "cp /tmp/cloudwatchconfig.json /home/centos/",
                "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/home/centos/cloudwatchconfig.json -s",
                "sudo service amazon-cloudwatch-agent.service start"
                     



                     ]
                  ]
                }
            },
            "LaunchConfigurationName" : "asg_launch_config"
         }
   
      },

      "DBInstance":{
         "Type" : "AWS::RDS::DBInstance",
         "Properties" : {
            "AllocatedStorage" : "20",
            "DBInstanceClass" : "db.t2.micro",
            "DBInstanceIdentifier" : "csye6225-su19",
            "DBName" : "csye6225",
            "DBSubnetGroupName" :{"Ref":"DBSubnetGroup"},
            "Engine" : "MySQL",
            "EngineVersion" : "8.0.15",
            "MasterUserPassword" : "csye6225password",
            "MasterUsername" : "csye6225master",
            "MultiAZ" : false,
            "PubliclyAccessible" : true ,
            "VPCSecurityGroups": [{"Ref":"DBSecurityGroup"}]

         }
      } , 

      "autoScalingGroup":{
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "AutoScalingGroupName" : "AutoScalingGroup",
            "VPCZoneIdentifier" : [{"Ref" : "Subnet1"}, {"Ref" : "Subnet2"}],
            "LaunchConfigurationName" : {"Ref": "launchConfiguration"},
            "Cooldown" : 60,
            "MaxSize" : "4",
            "MinSize" : "2",
            "DesiredCapacity" : "2",
            "TargetGroupARNs" : [ {"Ref":"myTargetGroup"}],
            "Tags":[
               {
                  "Key":"codeDeployKey",
                  "Value":"codeDeployValue",
                  "PropagateAtLaunch":true
               }
            ] 
            
         }
      },

      "WebServerScaleUpPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
           "AdjustmentType": "ChangeInCapacity",
           "AutoScalingGroupName": {
             "Ref": "autoScalingGroup"
           },
           "Cooldown": "60",
           "ScalingAdjustment": "1"
         }
      },

      "WebServerScaleDownPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {"Ref": "autoScalingGroup"},
            "Cooldown": "60",
            "ScalingAdjustment": "-1"
         }
      },

      "CPUAlarmHigh": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "180",
            "EvaluationPeriods": "2",
            "Threshold": "5",
            "AlarmActions": [
               { "Ref": "WebServerScaleUpPolicy" }
            ],
            "Dimensions": [
               {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                     "Ref": "autoScalingGroup"
                     }
               }
            ],
            "ComparisonOperator": "GreaterThanThreshold"
         }
      },


      "CPUAlarmLow": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "2",
            "Threshold": "3",
            "AlarmActions": [
               { "Ref": "WebServerScaleDownPolicy" }
            ],
            "Dimensions": [
               {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                     "Ref": "autoScalingGroup"
                     }
               }
            ],
            "ComparisonOperator": "LessThanThreshold"
         }
      },


      "myLoadBalancer" : {
         "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties" :
           {
             "IpAddressType" : "ipv4",
             "SecurityGroups" : [ {"Ref":"loadbalancerSecurityGroup"} ],
             "Subnets": [ { "Ref" : "Subnet1" },
                        { "Ref" : "Subnet2"} ],
             "Name" : "myLoadBalancer",
             "Scheme" : "internet-facing",
             "Tags" : [  {
               "Key": "Name",
               "Value": "csye6225-Loadbalancer"
            } ],
             "Type" : "application"
            }

      },

      "myListener" : {
         "Type" : "AWS::ElasticLoadBalancingV2::Listener",
         "DependsOn":["myTargetGroup","myLoadBalancer"],
         "Properties" : {
            
            "DefaultActions" : [{                
               "Type" : "forward",
               "TargetGroupArn" : { "Ref" : "myTargetGroup" }
              }],
            "LoadBalancerArn" : { "Ref" : "myLoadBalancer" },
            "Certificates":[{"CertificateArn":{"Ref":"certificateARN"}}],
            "Port" : "443",
            "Protocol" : "HTTPS"
                      
         }
      },

     "myTargetGroup":{
         "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties" : {
            "HealthCheckIntervalSeconds" : 30,
            "HealthCheckPath" : "/librarymanagementsystem-0.0.1-SNAPSHOT",
            "HealthCheckPort" : "8080",
            "HealthCheckProtocol" : "HTTP",
            "HealthCheckTimeoutSeconds" : 7,
            "HealthyThresholdCount" : 3,
            "Name" : "myTargetGroup",
            "Port" : 8080,
            "Protocol" : "HTTP",
            "TargetType":"instance",
            "UnhealthyThresholdCount" : 5,
            "VpcId" : {"Ref": "VPC"},
            "Matcher":{
               "HttpCode" : "200,302"
            }
         }
      },

      "myRecordSet":{
         "Type" : "AWS::Route53::RecordSet",
         "DependsOn":"myLoadBalancer",
         "Properties" : {
            "AliasTarget" : {
               "DNSName":{"Fn::GetAtt":["myLoadBalancer","DNSName"]},
               "HostedZoneId":{"Fn::GetAtt":["myLoadBalancer","CanonicalHostedZoneID"]},
               "EvaluateTargetHealth":true
            },
            "Name" :{"Ref":"domainName"},
            "HostedZoneId" : {"Ref":"hostedId"},
            "Type" : "A"
        }
      },

      "CodeDeployEC2S3" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
              "ManagedPolicyName": "CodeDeploy-EC2-S3",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "s3:Get*",
                      "s3:List*"
                    ],
                    "Effect": "Allow",
                    "Resource":[
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }] ]},
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }, "/*"] ]}
                    ]
                  }
                ]
              }
            }
          },
          
          "CircleCIUploadToS3" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
              "ManagedPolicyName": "CircleCI-Upload-To-S3",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "S3:List*",
                      "s3:PutObject"
                    ],
                    "Effect": "Allow",
                    "Resource":[
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }] ]},
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }, "/*"] ]}
                    ]
                  }
                ]
              },
              "Users" : [ { "Ref" : "CFNUser" } ]
            }
          },

          "CirlceCICodeDeploy" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
              "ManagedPolicyName": "CirlceCI-Code-Deploy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:RegisterApplicationRevision",
                      "codedeploy:GetApplicationRevision"
                    ],
                    "Resource": [
                      {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":application:csye6225-webapp" ] ]}
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:CreateDeployment",
                      "codedeploy:GetDeployment"
                    ],
                    "Resource": [
                      "*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "codedeploy:GetDeploymentConfig"
                    ],
                    "Resource": [
                      {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.OneAtATime"] ]},
                      {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.HalfAtATime"] ]},
                      {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.AllAtOnce"] ]}
                    ]
                  }
                ]
              },
              "Users" : [ { "Ref" : "CFNUser" } ]
            }
          },

          "ImageEC2S3":{
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
              "PolicyDocument" : {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "s3:*"
                    ],
                    "Effect": "Allow",
                    "Resource": [
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3ImageBucket" }] ]},
                      {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3ImageBucket" }, "/*"] ]}
                    ]
                  }
                ]
              },
              "ManagedPolicyName" : "ImageEC2S3"
            }
          },

          "CodeDeployServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                 "Service": [ "codedeploy.us-east-1.amazonaws.com" ]
               },
               "Action": [ "sts:AssumeRole" ]
             } ]
             },
             "ManagedPolicyArns":[
              "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
             "Path": "/",
             "RoleName": "CodeDeployServiceRole"
           }
         },

         "CodeDeployEC2ServiceRole": {
          "DependsOn" : ["CodeDeployEC2S3", "ImageEC2S3"],
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
              "Effect": "Allow",
              "Principal": {
               "Service": [ "ec2.amazonaws.com" ]
             },
             "Action": [ "sts:AssumeRole" ]
           } ]
           },
           "ManagedPolicyArns":[
            "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
            "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
            "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda",
            {"Ref" : "CodeDeployEC2S3"},
            {"Ref" : "ImageEC2S3"}
          ],
           "Path": "/",
           "RoleName": "CodeDeployEC2ServiceRole"
         }
       },

       "CodeDeployEC2ServiceInstanceProfile": {
        "DependsOn" : ["CodeDeployEC2ServiceRole"],
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
           "Ref": "CodeDeployEC2ServiceRole"
         } ]
        }
      },

      "CodeDeployApplication": {
        "Type": "AWS::CodeDeploy::Application",
        "Properties": {
          "ApplicationName" : "csye6225-webapp",
          "ComputePlatform": "Server"
        }
      },

      "DeploymentGroup" : {
        "DependsOn" : ["CodeDeployServiceRole"],
        "Type" : "AWS::CodeDeploy::DeploymentGroup",
        "Properties" : {
          "ApplicationName" : "csye6225-webapp",
          "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
          "DeploymentGroupName": "csye6225-webapp-deployment",
          "DeploymentStyle":{
            "DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
            "DeploymentType" : "IN_PLACE"
          },
          "AutoRollbackConfiguration": {
            "Enabled": "true",
            "Events": [ "DEPLOYMENT_FAILURE" ]
          },
          "Ec2TagFilters" : [{
            "Key" : "aws:cloudformation:stack-name",
            "Value" :{ "Ref" : "stackName"},
            "Type" : "KEY_AND_VALUE"
          }],
          "ServiceRoleArn" : {
            "Fn::GetAtt" : [
              "CodeDeployServiceRole", 
              "Arn"
            ]
          },

          "AutoScalingGroups":[{"Ref":"autoScalingGroup"}],
            "LoadBalancerInfo" : {
               "TargetGroupInfoList" : [
                  {
                     "Name": { "Fn::GetAtt": ["myTargetGroup", "TargetGroupName"] }
                  }
               ]


        }
      }



   } 

},

   "Outputs" : {
     "loadBalancer" : {
       "Description" : "Application LoadBalancer",
       "Value" : {"Ref" : "myLoadBalancer"},
       "Export" : {
         "Name" : "csye6225-load-balancer"
       }
     }
   }














}